package protocol

import (
	"io"
)

// Code generated by internal/generator DO NOT EDIT.

// This causes the server to switch into the target state.
type Handshake struct {
	// See protocol version numbers
	// (https://wiki.vg/Protocol_version_numbers)
	// (currently 498 in Minecraft 1.14.4)
	ProtocolVersion int32

	// Hostname or IP, e.g. localhost or 127.0.0.1, that was used to
	// connect. The Notchian server does not use this information.
	// Note that SRV records are a complete redirect, e.g. if
	// _minecraft._tcp.example.com points to mc.example.org, users
	// connecting to example.com will provide mc.example.org as
	// server address in addition to connecting to it.
	ServerAddress string

	// Default is 25565. The Notchian server does not use this information.
	ServerPort uint16

	// 1 for status, 2 for login
	NextState int32
}

// returns 0x00
func (p Handshake) id() int32 { return 0x00 }
func (p *Handshake) decode(r io.Reader) (err error) {
	if p.ProtocolVersion, err = readVarInt(r); err != nil {
		return err
	}
	if p.ServerAddress, err = readString(r); err != nil {
		return err
	}
	if p.ServerPort, err = readUnsignedShort(r); err != nil {
		return err
	}
	if p.NextState, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p Handshake) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.ProtocolVersion); err != nil {
		return err
	}
	if err = writeString(w, p.ServerAddress); err != nil {
		return err
	}
	if err = writeUnsignedShort(w, p.ServerPort); err != nil {
		return err
	}
	if err = writeVarInt(w, p.NextState); err != nil {
		return err
	}
	return
}

type Response struct {
	JSONResponse string
}

// returns 0x00
func (p Response) id() int32 { return 0x00 }
func (p *Response) decode(r io.Reader) (err error) {
	if p.JSONResponse, err = readString(r); err != nil {
		return err
	}
	return
}
func (p Response) encode(w io.Writer) (err error) {
	if err = writeString(w, p.JSONResponse); err != nil {
		return err
	}
	return
}

type Pong struct {
	Payload int64
}

// returns 0x01
func (p Pong) id() int32 { return 0x01 }
func (p *Pong) decode(r io.Reader) (err error) {
	if p.Payload, err = readLong(r); err != nil {
		return err
	}
	return
}
func (p Pong) encode(w io.Writer) (err error) {
	if err = writeLong(w, p.Payload); err != nil {
		return err
	}
	return
}

type Request struct {
}

// returns 0x00
func (p Request) id() int32                       { return 0x00 }
func (p *Request) decode(r io.Reader) (err error) { return }
func (p Request) encode(w io.Writer) (err error)  { return }

type Ping struct {
	Payload int64
}

// returns 0x01
func (p Ping) id() int32 { return 0x01 }
func (p *Ping) decode(r io.Reader) (err error) {
	if p.Payload, err = readLong(r); err != nil {
		return err
	}
	return
}
func (p Ping) encode(w io.Writer) (err error) {
	if err = writeLong(w, p.Payload); err != nil {
		return err
	}
	return
}

type DisconnectLogin struct {
	Reason string
}

// returns 0x00
func (p DisconnectLogin) id() int32 { return 0x00 }
func (p *DisconnectLogin) decode(r io.Reader) (err error) {
	if p.Reason, err = readString(r); err != nil {
		return err
	}
	return
}
func (p DisconnectLogin) encode(w io.Writer) (err error) {
	if err = writeString(w, p.Reason); err != nil {
		return err
	}
	return
}

// This packet switches the connection state to play.
type LoginSuccess struct {
	// Unlike in other packets, this field contains the UUID as a
	// string with hyphens.
	UUID string

	Username string
}

// returns 0x02
func (p LoginSuccess) id() int32 { return 0x02 }
func (p *LoginSuccess) decode(r io.Reader) (err error) {
	if p.UUID, err = readString(r); err != nil {
		return err
	}
	if p.Username, err = readString(r); err != nil {
		return err
	}
	return
}
func (p LoginSuccess) encode(w io.Writer) (err error) {
	if err = writeString(w, p.UUID); err != nil {
		return err
	}
	if err = writeString(w, p.Username); err != nil {
		return err
	}
	return
}

type SetCompression struct {
	Treshold int32
}

// returns 0x03
func (p SetCompression) id() int32 { return 0x03 }
func (p *SetCompression) decode(r io.Reader) (err error) {
	if p.Treshold, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p SetCompression) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.Treshold); err != nil {
		return err
	}
	return
}

type LoginStart struct {
	Name string
}

// returns 0x00
func (p LoginStart) id() int32 { return 0x00 }
func (p *LoginStart) decode(r io.Reader) (err error) {
	if p.Name, err = readString(r); err != nil {
		return err
	}
	return
}
func (p LoginStart) encode(w io.Writer) (err error) {
	if err = writeString(w, p.Name); err != nil {
		return err
	}
	return
}

// Sent by the server when a vehicle or other object is created.
type SpawnObject struct {
	// EID of the object
	EID int32

	// The type of object (same as in Spawn Mob)
	Type int32

	X float64

	Y float64

	Z float64

	Pitch byte

	Yaw byte

	Data int32

	VX int16

	VY int16

	VZ int16
}

// returns 0x00
func (p SpawnObject) id() int32 { return 0x00 }
func (p *SpawnObject) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.Type, err = readVarInt(r); err != nil {
		return err
	}
	if p.X, err = readDouble(r); err != nil {
		return err
	}
	if p.Y, err = readDouble(r); err != nil {
		return err
	}
	if p.Z, err = readDouble(r); err != nil {
		return err
	}
	if p.Pitch, err = readAngle(r); err != nil {
		return err
	}
	if p.Yaw, err = readAngle(r); err != nil {
		return err
	}
	if p.Data, err = readInt(r); err != nil {
		return err
	}
	if p.VX, err = readShort(r); err != nil {
		return err
	}
	if p.VY, err = readShort(r); err != nil {
		return err
	}
	if p.VZ, err = readShort(r); err != nil {
		return err
	}
	return
}
func (p SpawnObject) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeVarInt(w, p.Type); err != nil {
		return err
	}
	if err = writeDouble(w, p.X); err != nil {
		return err
	}
	if err = writeDouble(w, p.Y); err != nil {
		return err
	}
	if err = writeDouble(w, p.Z); err != nil {
		return err
	}
	if err = writeAngle(w, p.Pitch); err != nil {
		return err
	}
	if err = writeAngle(w, p.Yaw); err != nil {
		return err
	}
	if err = writeInt(w, p.Data); err != nil {
		return err
	}
	if err = writeShort(w, p.VX); err != nil {
		return err
	}
	if err = writeShort(w, p.VY); err != nil {
		return err
	}
	if err = writeShort(w, p.VZ); err != nil {
		return err
	}
	return
}

// Spawns one or more experience orbs.
type SpawnExperienceOrb struct {
	EID int32

	X float64

	Y float64

	Z float64

	Count int16
}

// returns 0x01
func (p SpawnExperienceOrb) id() int32 { return 0x01 }
func (p *SpawnExperienceOrb) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.X, err = readDouble(r); err != nil {
		return err
	}
	if p.Y, err = readDouble(r); err != nil {
		return err
	}
	if p.Z, err = readDouble(r); err != nil {
		return err
	}
	if p.Count, err = readShort(r); err != nil {
		return err
	}
	return
}
func (p SpawnExperienceOrb) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeDouble(w, p.X); err != nil {
		return err
	}
	if err = writeDouble(w, p.Y); err != nil {
		return err
	}
	if err = writeDouble(w, p.Z); err != nil {
		return err
	}
	if err = writeShort(w, p.Count); err != nil {
		return err
	}
	return
}

// With this packet, the server notifies the client of thunderbolts striking within a 512 block radius around the player. The coordinates specify where exactly the thunderbolt strikes.
type SpawnGlobalEntity struct {
	EID int32

	// With this packet, the server notifies the client of thunderbolts striking within a 512 block radius around the player. The coordinates specify where exactly the thunderbolt strikes.
	Type byte

	X float64

	Y float64

	Z float64
}

// returns 0x02
func (p SpawnGlobalEntity) id() int32 { return 0x02 }
func (p *SpawnGlobalEntity) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.Type, err = readByte(r); err != nil {
		return err
	}
	if p.X, err = readDouble(r); err != nil {
		return err
	}
	if p.Y, err = readDouble(r); err != nil {
		return err
	}
	if p.Z, err = readDouble(r); err != nil {
		return err
	}
	return
}
func (p SpawnGlobalEntity) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeByte(w, p.Type); err != nil {
		return err
	}
	if err = writeDouble(w, p.X); err != nil {
		return err
	}
	if err = writeDouble(w, p.Y); err != nil {
		return err
	}
	if err = writeDouble(w, p.Z); err != nil {
		return err
	}
	return
}

type SpawnMob struct {
	EID int32

	EntityUUID string

	Type int32

	X float64

	Y float64

	Z float64

	Yaw byte

	Pitch byte

	HeadPitch byte

	VelocityX int16

	VelocityY int16

	VelocityZ int16

	Metadata string
}

// returns 0x03
func (p SpawnMob) id() int32 { return 0x03 }
func (p *SpawnMob) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.EntityUUID, err = readUUID(r); err != nil {
		return err
	}
	if p.Type, err = readVarInt(r); err != nil {
		return err
	}
	if p.X, err = readDouble(r); err != nil {
		return err
	}
	if p.Y, err = readDouble(r); err != nil {
		return err
	}
	if p.Z, err = readDouble(r); err != nil {
		return err
	}
	if p.Yaw, err = readAngle(r); err != nil {
		return err
	}
	if p.Pitch, err = readAngle(r); err != nil {
		return err
	}
	if p.HeadPitch, err = readAngle(r); err != nil {
		return err
	}
	if p.VelocityX, err = readShort(r); err != nil {
		return err
	}
	if p.VelocityY, err = readShort(r); err != nil {
		return err
	}
	if p.VelocityZ, err = readShort(r); err != nil {
		return err
	}
	if p.Metadata, err = readEntityMetadata(r); err != nil {
		return err
	}
	return
}
func (p SpawnMob) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeUUID(w, p.EntityUUID); err != nil {
		return err
	}
	if err = writeVarInt(w, p.Type); err != nil {
		return err
	}
	if err = writeDouble(w, p.X); err != nil {
		return err
	}
	if err = writeDouble(w, p.Y); err != nil {
		return err
	}
	if err = writeDouble(w, p.Z); err != nil {
		return err
	}
	if err = writeAngle(w, p.Yaw); err != nil {
		return err
	}
	if err = writeAngle(w, p.Pitch); err != nil {
		return err
	}
	if err = writeAngle(w, p.HeadPitch); err != nil {
		return err
	}
	if err = writeShort(w, p.VelocityX); err != nil {
		return err
	}
	if err = writeShort(w, p.VelocityY); err != nil {
		return err
	}
	if err = writeShort(w, p.VelocityZ); err != nil {
		return err
	}
	if err = writeEntityMetadata(w, p.Metadata); err != nil {
		return err
	}
	return
}

type SpawnPainting struct {
	EID int32

	EntityUUID string

	Motive int32

	Location Position

	Direction byte
}

// returns 0x04
func (p SpawnPainting) id() int32 { return 0x04 }
func (p *SpawnPainting) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.EntityUUID, err = readUUID(r); err != nil {
		return err
	}
	if p.Motive, err = readVarInt(r); err != nil {
		return err
	}
	if p.Location, err = readPosition(r); err != nil {
		return err
	}
	if p.Direction, err = readByte(r); err != nil {
		return err
	}
	return
}
func (p SpawnPainting) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeUUID(w, p.EntityUUID); err != nil {
		return err
	}
	if err = writeVarInt(w, p.Motive); err != nil {
		return err
	}
	if err = writePosition(w, p.Location); err != nil {
		return err
	}
	if err = writeByte(w, p.Direction); err != nil {
		return err
	}
	return
}

type SpawnPlayer struct {
	EID int32

	PlayerUUID string

	X float64

	Y float64

	Z float64

	Yaw byte

	Pitch byte

	Metadata string
}

// returns 0x05
func (p SpawnPlayer) id() int32 { return 0x05 }
func (p *SpawnPlayer) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.PlayerUUID, err = readUUID(r); err != nil {
		return err
	}
	if p.X, err = readDouble(r); err != nil {
		return err
	}
	if p.Y, err = readDouble(r); err != nil {
		return err
	}
	if p.Z, err = readDouble(r); err != nil {
		return err
	}
	if p.Yaw, err = readAngle(r); err != nil {
		return err
	}
	if p.Pitch, err = readAngle(r); err != nil {
		return err
	}
	if p.Metadata, err = readEntityMetadata(r); err != nil {
		return err
	}
	return
}
func (p SpawnPlayer) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeUUID(w, p.PlayerUUID); err != nil {
		return err
	}
	if err = writeDouble(w, p.X); err != nil {
		return err
	}
	if err = writeDouble(w, p.Y); err != nil {
		return err
	}
	if err = writeDouble(w, p.Z); err != nil {
		return err
	}
	if err = writeAngle(w, p.Yaw); err != nil {
		return err
	}
	if err = writeAngle(w, p.Pitch); err != nil {
		return err
	}
	if err = writeEntityMetadata(w, p.Metadata); err != nil {
		return err
	}
	return
}

type AnimationClientbound struct {
	EID int32

	Animation uint8
}

// returns 0x06
func (p AnimationClientbound) id() int32 { return 0x06 }
func (p *AnimationClientbound) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.Animation, err = readUnsignedByte(r); err != nil {
		return err
	}
	return
}
func (p AnimationClientbound) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeUnsignedByte(w, p.Animation); err != nil {
		return err
	}
	return
}

type BlockBreakAnimation struct {
	EID int32

	Location Position

	DestroyStage byte
}

// returns 0x08
func (p BlockBreakAnimation) id() int32 { return 0x08 }
func (p *BlockBreakAnimation) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.Location, err = readPosition(r); err != nil {
		return err
	}
	if p.DestroyStage, err = readByte(r); err != nil {
		return err
	}
	return
}
func (p BlockBreakAnimation) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writePosition(w, p.Location); err != nil {
		return err
	}
	if err = writeByte(w, p.DestroyStage); err != nil {
		return err
	}
	return
}

type UpdateBlockEntity struct {
	Location Position

	Action uint8

	NBTData interface{}
}

// returns 0x09
func (p UpdateBlockEntity) id() int32 { return 0x09 }
func (p *UpdateBlockEntity) decode(r io.Reader) (err error) {
	if p.Location, err = readPosition(r); err != nil {
		return err
	}
	if p.Action, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.NBTData, err = readNBTTag(r); err != nil {
		return err
	}
	return
}
func (p UpdateBlockEntity) encode(w io.Writer) (err error) {
	if err = writePosition(w, p.Location); err != nil {
		return err
	}
	if err = writeUnsignedByte(w, p.Action); err != nil {
		return err
	}
	if err = writeNBTTag(w, p.NBTData); err != nil {
		return err
	}
	return
}

type BlockAction struct {
	Location Position

	ActionID uint8

	ActionParam uint8

	BlockType int32
}

// returns 0x0A
func (p BlockAction) id() int32 { return 0x0A }
func (p *BlockAction) decode(r io.Reader) (err error) {
	if p.Location, err = readPosition(r); err != nil {
		return err
	}
	if p.ActionID, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.ActionParam, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.BlockType, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p BlockAction) encode(w io.Writer) (err error) {
	if err = writePosition(w, p.Location); err != nil {
		return err
	}
	if err = writeUnsignedByte(w, p.ActionID); err != nil {
		return err
	}
	if err = writeUnsignedByte(w, p.ActionParam); err != nil {
		return err
	}
	if err = writeVarInt(w, p.BlockType); err != nil {
		return err
	}
	return
}

type BlockChange struct {
	Location Position

	BlockID int32
}

// returns 0x0B
func (p BlockChange) id() int32 { return 0x0B }
func (p *BlockChange) decode(r io.Reader) (err error) {
	if p.Location, err = readPosition(r); err != nil {
		return err
	}
	if p.BlockID, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p BlockChange) encode(w io.Writer) (err error) {
	if err = writePosition(w, p.Location); err != nil {
		return err
	}
	if err = writeVarInt(w, p.BlockID); err != nil {
		return err
	}
	return
}

type ServerDifficulty struct {
	Difficulty uint8

	DifficultyLocked bool
}

// returns 0x0D
func (p ServerDifficulty) id() int32 { return 0x0D }
func (p *ServerDifficulty) decode(r io.Reader) (err error) {
	if p.Difficulty, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.DifficultyLocked, err = readBoolean(r); err != nil {
		return err
	}
	return
}
func (p ServerDifficulty) encode(w io.Writer) (err error) {
	if err = writeUnsignedByte(w, p.Difficulty); err != nil {
		return err
	}
	if err = writeBoolean(w, p.DifficultyLocked); err != nil {
		return err
	}
	return
}

type ChatMessageClientbound struct {
	JSONData string

	Position byte
}

// returns 0x0E
func (p ChatMessageClientbound) id() int32 { return 0x0E }
func (p *ChatMessageClientbound) decode(r io.Reader) (err error) {
	if p.JSONData, err = readString(r); err != nil {
		return err
	}
	if p.Position, err = readByte(r); err != nil {
		return err
	}
	return
}
func (p ChatMessageClientbound) encode(w io.Writer) (err error) {
	if err = writeString(w, p.JSONData); err != nil {
		return err
	}
	if err = writeByte(w, p.Position); err != nil {
		return err
	}
	return
}

type ConfirmTransactionClientbound struct {
	WindowID byte

	ActionNumber int16

	Accepted bool
}

// returns 0x12
func (p ConfirmTransactionClientbound) id() int32 { return 0x12 }
func (p *ConfirmTransactionClientbound) decode(r io.Reader) (err error) {
	if p.WindowID, err = readByte(r); err != nil {
		return err
	}
	if p.ActionNumber, err = readShort(r); err != nil {
		return err
	}
	if p.Accepted, err = readBoolean(r); err != nil {
		return err
	}
	return
}
func (p ConfirmTransactionClientbound) encode(w io.Writer) (err error) {
	if err = writeByte(w, p.WindowID); err != nil {
		return err
	}
	if err = writeShort(w, p.ActionNumber); err != nil {
		return err
	}
	if err = writeBoolean(w, p.Accepted); err != nil {
		return err
	}
	return
}

type CloseWindowClientbound struct {
	WindowID uint8
}

// returns 0x13
func (p CloseWindowClientbound) id() int32 { return 0x13 }
func (p *CloseWindowClientbound) decode(r io.Reader) (err error) {
	if p.WindowID, err = readUnsignedByte(r); err != nil {
		return err
	}
	return
}
func (p CloseWindowClientbound) encode(w io.Writer) (err error) {
	if err = writeUnsignedByte(w, p.WindowID); err != nil {
		return err
	}
	return
}

type WindowProperty struct {
	WindowID uint8

	Property int16

	Value int16
}

// returns 0x15
func (p WindowProperty) id() int32 { return 0x15 }
func (p *WindowProperty) decode(r io.Reader) (err error) {
	if p.WindowID, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.Property, err = readShort(r); err != nil {
		return err
	}
	if p.Value, err = readShort(r); err != nil {
		return err
	}
	return
}
func (p WindowProperty) encode(w io.Writer) (err error) {
	if err = writeUnsignedByte(w, p.WindowID); err != nil {
		return err
	}
	if err = writeShort(w, p.Property); err != nil {
		return err
	}
	if err = writeShort(w, p.Value); err != nil {
		return err
	}
	return
}

type SetCooldown struct {
	ItemID int32

	CooldownTicks int32
}

// returns 0x17
func (p SetCooldown) id() int32 { return 0x17 }
func (p *SetCooldown) decode(r io.Reader) (err error) {
	if p.ItemID, err = readVarInt(r); err != nil {
		return err
	}
	if p.CooldownTicks, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p SetCooldown) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.ItemID); err != nil {
		return err
	}
	if err = writeVarInt(w, p.CooldownTicks); err != nil {
		return err
	}
	return
}

type NamedSoundEffect struct {
	SoundName string

	SoundCategory int32

	EffectPositionX int32

	EffectPositionY int32

	EffectPositionZ int32

	Volume float32

	Pitch float32
}

// returns 0x19
func (p NamedSoundEffect) id() int32 { return 0x19 }
func (p *NamedSoundEffect) decode(r io.Reader) (err error) {
	if p.SoundName, err = readIdentifier(r); err != nil {
		return err
	}
	if p.SoundCategory, err = readVarInt(r); err != nil {
		return err
	}
	if p.EffectPositionX, err = readInt(r); err != nil {
		return err
	}
	if p.EffectPositionY, err = readInt(r); err != nil {
		return err
	}
	if p.EffectPositionZ, err = readInt(r); err != nil {
		return err
	}
	if p.Volume, err = readFloat(r); err != nil {
		return err
	}
	if p.Pitch, err = readFloat(r); err != nil {
		return err
	}
	return
}
func (p NamedSoundEffect) encode(w io.Writer) (err error) {
	if err = writeIdentifier(w, p.SoundName); err != nil {
		return err
	}
	if err = writeVarInt(w, p.SoundCategory); err != nil {
		return err
	}
	if err = writeInt(w, p.EffectPositionX); err != nil {
		return err
	}
	if err = writeInt(w, p.EffectPositionY); err != nil {
		return err
	}
	if err = writeInt(w, p.EffectPositionZ); err != nil {
		return err
	}
	if err = writeFloat(w, p.Volume); err != nil {
		return err
	}
	if err = writeFloat(w, p.Pitch); err != nil {
		return err
	}
	return
}

// Sent by the server before it disconnects a client.
// The client assumes that the server has already closed the
// connection by the time the packet arrives.
type DisconnectPlay struct {
	// Displayed to the client when the connection terminates.
	Reason string
}

// returns 0x1A
func (p DisconnectPlay) id() int32 { return 0x1A }
func (p *DisconnectPlay) decode(r io.Reader) (err error) {
	if p.Reason, err = readString(r); err != nil {
		return err
	}
	return
}
func (p DisconnectPlay) encode(w io.Writer) (err error) {
	if err = writeString(w, p.Reason); err != nil {
		return err
	}
	return
}

type EntityStatus struct {
	EID int32

	EntityStatus byte
}

// returns 0x1B
func (p EntityStatus) id() int32 { return 0x1B }
func (p *EntityStatus) decode(r io.Reader) (err error) {
	if p.EID, err = readInt(r); err != nil {
		return err
	}
	if p.EntityStatus, err = readByte(r); err != nil {
		return err
	}
	return
}
func (p EntityStatus) encode(w io.Writer) (err error) {
	if err = writeInt(w, p.EID); err != nil {
		return err
	}
	if err = writeByte(w, p.EntityStatus); err != nil {
		return err
	}
	return
}

type UnloadChunk struct {
	ChunkX int32

	ChunkZ int32
}

// returns 0x1D
func (p UnloadChunk) id() int32 { return 0x1D }
func (p *UnloadChunk) decode(r io.Reader) (err error) {
	if p.ChunkX, err = readInt(r); err != nil {
		return err
	}
	if p.ChunkZ, err = readInt(r); err != nil {
		return err
	}
	return
}
func (p UnloadChunk) encode(w io.Writer) (err error) {
	if err = writeInt(w, p.ChunkX); err != nil {
		return err
	}
	if err = writeInt(w, p.ChunkZ); err != nil {
		return err
	}
	return
}

type ChangeGameState struct {
	Reason uint8

	Value float32
}

// returns 0x1E
func (p ChangeGameState) id() int32 { return 0x1E }
func (p *ChangeGameState) decode(r io.Reader) (err error) {
	if p.Reason, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.Value, err = readFloat(r); err != nil {
		return err
	}
	return
}
func (p ChangeGameState) encode(w io.Writer) (err error) {
	if err = writeUnsignedByte(w, p.Reason); err != nil {
		return err
	}
	if err = writeFloat(w, p.Value); err != nil {
		return err
	}
	return
}

type KeepAliveClientbound struct {
	KeepAliveID int64
}

// returns 0x20
func (p KeepAliveClientbound) id() int32 { return 0x20 }
func (p *KeepAliveClientbound) decode(r io.Reader) (err error) {
	if p.KeepAliveID, err = readLong(r); err != nil {
		return err
	}
	return
}
func (p KeepAliveClientbound) encode(w io.Writer) (err error) {
	if err = writeLong(w, p.KeepAliveID); err != nil {
		return err
	}
	return
}

type ChunkData struct {
	X int32

	Y int32

	FullChunk bool

	PrimaryBitMask int32

	Heightmaps []interface{}

	Data []byte

	BlockEntities []interface{}
}

// returns 0x21
func (p ChunkData) id() int32 { return 0x21 }

type Effect struct {
	EffectID int32

	Location Position

	Data int32

	DisableRelativeVolume bool
}

// returns 0x22
func (p Effect) id() int32 { return 0x22 }
func (p *Effect) decode(r io.Reader) (err error) {
	if p.EffectID, err = readInt(r); err != nil {
		return err
	}
	if p.Location, err = readPosition(r); err != nil {
		return err
	}
	if p.Data, err = readInt(r); err != nil {
		return err
	}
	if p.DisableRelativeVolume, err = readBoolean(r); err != nil {
		return err
	}
	return
}
func (p Effect) encode(w io.Writer) (err error) {
	if err = writeInt(w, p.EffectID); err != nil {
		return err
	}
	if err = writePosition(w, p.Location); err != nil {
		return err
	}
	if err = writeInt(w, p.Data); err != nil {
		return err
	}
	if err = writeBoolean(w, p.DisableRelativeVolume); err != nil {
		return err
	}
	return
}

type Particle struct {
	ParticleID int32

	LongDistance bool

	X float32

	Y float32

	Z float32

	OffsetX float32

	OffsetY float32

	OffsetZ float32

	ParticleData float32

	ParticleCount int32

	Data interface{}
}

// returns 0x23
func (p Particle) id() int32 { return 0x23 }

type JoinGame struct {
	EID int32

	Gamemode uint8

	Dimension int32

	MaxPlayers uint8

	LevelType string

	ViewDistance int32

	ReducedDebugInfo bool
}

// returns 0x25
func (p JoinGame) id() int32 { return 0x25 }
func (p *JoinGame) decode(r io.Reader) (err error) {
	if p.EID, err = readInt(r); err != nil {
		return err
	}
	if p.Gamemode, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.Dimension, err = readInt(r); err != nil {
		return err
	}
	if p.MaxPlayers, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.LevelType, err = readString(r); err != nil {
		return err
	}
	if p.ViewDistance, err = readVarInt(r); err != nil {
		return err
	}
	if p.ReducedDebugInfo, err = readBoolean(r); err != nil {
		return err
	}
	return
}
func (p JoinGame) encode(w io.Writer) (err error) {
	if err = writeInt(w, p.EID); err != nil {
		return err
	}
	if err = writeUnsignedByte(w, p.Gamemode); err != nil {
		return err
	}
	if err = writeInt(w, p.Dimension); err != nil {
		return err
	}
	if err = writeUnsignedByte(w, p.MaxPlayers); err != nil {
		return err
	}
	if err = writeString(w, p.LevelType); err != nil {
		return err
	}
	if err = writeVarInt(w, p.ViewDistance); err != nil {
		return err
	}
	if err = writeBoolean(w, p.ReducedDebugInfo); err != nil {
		return err
	}
	return
}

type EntityRelativeMove struct {
	EID int32

	DeltaX int16

	DeltaY int16

	DeltaZ int16

	OnGround bool
}

// returns 0x28
func (p EntityRelativeMove) id() int32 { return 0x28 }
func (p *EntityRelativeMove) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.DeltaX, err = readShort(r); err != nil {
		return err
	}
	if p.DeltaY, err = readShort(r); err != nil {
		return err
	}
	if p.DeltaZ, err = readShort(r); err != nil {
		return err
	}
	if p.OnGround, err = readBoolean(r); err != nil {
		return err
	}
	return
}
func (p EntityRelativeMove) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeShort(w, p.DeltaX); err != nil {
		return err
	}
	if err = writeShort(w, p.DeltaY); err != nil {
		return err
	}
	if err = writeShort(w, p.DeltaZ); err != nil {
		return err
	}
	if err = writeBoolean(w, p.OnGround); err != nil {
		return err
	}
	return
}

type EntityLookAndRelativeMove struct {
	EID int32

	DeltaX int16

	DeltaY int16

	DeltaZ int16

	Yaw byte

	Pitch byte

	OnGround bool
}

// returns 0x29
func (p EntityLookAndRelativeMove) id() int32 { return 0x29 }
func (p *EntityLookAndRelativeMove) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.DeltaX, err = readShort(r); err != nil {
		return err
	}
	if p.DeltaY, err = readShort(r); err != nil {
		return err
	}
	if p.DeltaZ, err = readShort(r); err != nil {
		return err
	}
	if p.Yaw, err = readAngle(r); err != nil {
		return err
	}
	if p.Pitch, err = readAngle(r); err != nil {
		return err
	}
	if p.OnGround, err = readBoolean(r); err != nil {
		return err
	}
	return
}
func (p EntityLookAndRelativeMove) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeShort(w, p.DeltaX); err != nil {
		return err
	}
	if err = writeShort(w, p.DeltaY); err != nil {
		return err
	}
	if err = writeShort(w, p.DeltaZ); err != nil {
		return err
	}
	if err = writeAngle(w, p.Yaw); err != nil {
		return err
	}
	if err = writeAngle(w, p.Pitch); err != nil {
		return err
	}
	if err = writeBoolean(w, p.OnGround); err != nil {
		return err
	}
	return
}

type EntityLook struct {
	EID int32

	Yaw byte

	Pitch byte

	OnGround bool
}

// returns 0x2A
func (p EntityLook) id() int32 { return 0x2A }
func (p *EntityLook) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	if p.Yaw, err = readAngle(r); err != nil {
		return err
	}
	if p.Pitch, err = readAngle(r); err != nil {
		return err
	}
	if p.OnGround, err = readBoolean(r); err != nil {
		return err
	}
	return
}
func (p EntityLook) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	if err = writeAngle(w, p.Yaw); err != nil {
		return err
	}
	if err = writeAngle(w, p.Pitch); err != nil {
		return err
	}
	if err = writeBoolean(w, p.OnGround); err != nil {
		return err
	}
	return
}

type Entity struct {
	EID int32
}

// returns 0x2B
func (p Entity) id() int32 { return 0x2B }
func (p *Entity) decode(r io.Reader) (err error) {
	if p.EID, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p Entity) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.EID); err != nil {
		return err
	}
	return
}

type PlayerAbilities struct {
	Flags byte

	FlyingSpeed float32

	FieldOfViewModifier float32
}

// returns 0x31
func (p PlayerAbilities) id() int32 { return 0x31 }
func (p *PlayerAbilities) decode(r io.Reader) (err error) {
	if p.Flags, err = readByte(r); err != nil {
		return err
	}
	if p.FlyingSpeed, err = readFloat(r); err != nil {
		return err
	}
	if p.FieldOfViewModifier, err = readFloat(r); err != nil {
		return err
	}
	return
}
func (p PlayerAbilities) encode(w io.Writer) (err error) {
	if err = writeByte(w, p.Flags); err != nil {
		return err
	}
	if err = writeFloat(w, p.FlyingSpeed); err != nil {
		return err
	}
	if err = writeFloat(w, p.FieldOfViewModifier); err != nil {
		return err
	}
	return
}

// Main article: https://wiki.vg/Plugin_channels
// Mods and plugins can use this to send their data. Minecraft itself
// uses several plugin channels. These internal channels are in the
// minecraft namespace.
// More documentation on this:
// http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/
type PluginMessageClientbound struct {
	// Name of the plugin channel used to send the data
	Channel string

	// Any data, depending on the channel. minecraft: channels are
	// documented here: https://wiki.vg/Plugin_channels. The length of
	// this array must be inferred from the packet length.
	Data []byte
}

// returns 0x18
func (p PluginMessageClientbound) id() int32 { return 0x18 }

type PlayerPositionAndLookClientbound struct {
	X float64

	Y float64

	Z float64

	Yaw float32

	Pitch float32

	Flags byte

	TeleportID int32
}

// returns 0x35
func (p PlayerPositionAndLookClientbound) id() int32 { return 0x35 }
func (p *PlayerPositionAndLookClientbound) decode(r io.Reader) (err error) {
	if p.X, err = readDouble(r); err != nil {
		return err
	}
	if p.Y, err = readDouble(r); err != nil {
		return err
	}
	if p.Z, err = readDouble(r); err != nil {
		return err
	}
	if p.Yaw, err = readFloat(r); err != nil {
		return err
	}
	if p.Pitch, err = readFloat(r); err != nil {
		return err
	}
	if p.Flags, err = readByte(r); err != nil {
		return err
	}
	if p.TeleportID, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p PlayerPositionAndLookClientbound) encode(w io.Writer) (err error) {
	if err = writeDouble(w, p.X); err != nil {
		return err
	}
	if err = writeDouble(w, p.Y); err != nil {
		return err
	}
	if err = writeDouble(w, p.Z); err != nil {
		return err
	}
	if err = writeFloat(w, p.Yaw); err != nil {
		return err
	}
	if err = writeFloat(w, p.Pitch); err != nil {
		return err
	}
	if err = writeByte(w, p.Flags); err != nil {
		return err
	}
	if err = writeVarInt(w, p.TeleportID); err != nil {
		return err
	}
	return
}

// Sent to change the player's slot selection.
type HeldItemChangeClientbound struct {
	// The slot which the player has selected (0–8)
	Slot byte
}

// returns 0x3F
func (p HeldItemChangeClientbound) id() int32 { return 0x3F }
func (p *HeldItemChangeClientbound) decode(r io.Reader) (err error) {
	if p.Slot, err = readByte(r); err != nil {
		return err
	}
	return
}
func (p HeldItemChangeClientbound) encode(w io.Writer) (err error) {
	if err = writeByte(w, p.Slot); err != nil {
		return err
	}
	return
}

type SpawnPosition struct {
	Location Position
}

// returns 0x4D
func (p SpawnPosition) id() int32 { return 0x4D }
func (p *SpawnPosition) decode(r io.Reader) (err error) {
	if p.Location, err = readPosition(r); err != nil {
		return err
	}
	return
}
func (p SpawnPosition) encode(w io.Writer) (err error) {
	if err = writePosition(w, p.Location); err != nil {
		return err
	}
	return
}

// Sent by client as confirmation of PlayerPositionAndLookClientbound.
type TeleportConfirm struct {
	// The ID given by the PlayerPositionAndLookClientbound packet
	TeleportID int32
}

// returns 0x00
func (p TeleportConfirm) id() int32 { return 0x00 }
func (p *TeleportConfirm) decode(r io.Reader) (err error) {
	if p.TeleportID, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p TeleportConfirm) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.TeleportID); err != nil {
		return err
	}
	return
}

type ClientStatus struct {
	// Action ID values:
	// Action ID | Action          | Notes
	// ----------------------------------------------------------------
	// 0         | Perform respawn | Sent when the client is ready to complete login and when the client is ready to respawn after death.
	// 1         | Request stats   | Sent when the client opens the Statistics menu
	ActionID int32
}

// returns 0x04
func (p ClientStatus) id() int32 { return 0x04 }
func (p *ClientStatus) decode(r io.Reader) (err error) {
	if p.ActionID, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p ClientStatus) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.ActionID); err != nil {
		return err
	}
	return
}

type ClientSettings struct {
	Locale string

	ViewDistance byte

	ChatMode int32

	ChatColors bool

	DisplaySkinParts uint8

	MainHand int32
}

// returns 0x05
func (p ClientSettings) id() int32 { return 0x05 }
func (p *ClientSettings) decode(r io.Reader) (err error) {
	if p.Locale, err = readString(r); err != nil {
		return err
	}
	if p.ViewDistance, err = readByte(r); err != nil {
		return err
	}
	if p.ChatMode, err = readVarInt(r); err != nil {
		return err
	}
	if p.ChatColors, err = readBoolean(r); err != nil {
		return err
	}
	if p.DisplaySkinParts, err = readUnsignedByte(r); err != nil {
		return err
	}
	if p.MainHand, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p ClientSettings) encode(w io.Writer) (err error) {
	if err = writeString(w, p.Locale); err != nil {
		return err
	}
	if err = writeByte(w, p.ViewDistance); err != nil {
		return err
	}
	if err = writeVarInt(w, p.ChatMode); err != nil {
		return err
	}
	if err = writeBoolean(w, p.ChatColors); err != nil {
		return err
	}
	if err = writeUnsignedByte(w, p.DisplaySkinParts); err != nil {
		return err
	}
	if err = writeVarInt(w, p.MainHand); err != nil {
		return err
	}
	return
}

// Main article: https://wiki.vg/Plugin_channels
// Mods and plugins can use this to send their data.
// Minecraft itself uses some plugin channels.
// These internal channels are in the minecraft namespace.
// More documentation on this:
// http://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/
// Note that the length of Data is known only from the packet length,
// since the packet has no length field of any kind.
type PluginMessageServerbound struct {
	// Name of the plugin channel used to send the data
	Channel string

	// Any data, depending on the channel. minecraft: channels are
	// documented here: https://wiki.vg/Plugin_channels. The length of
	// this array must be inferred from the packet length.
	Data []byte
}

// returns 0x0B
func (p PluginMessageServerbound) id() int32 { return 0x0B }

type AnimationServerbound struct {
	Hand int32
}

// returns 0x2A
func (p AnimationServerbound) id() int32 { return 0x2A }
func (p *AnimationServerbound) decode(r io.Reader) (err error) {
	if p.Hand, err = readVarInt(r); err != nil {
		return err
	}
	return
}
func (p AnimationServerbound) encode(w io.Writer) (err error) {
	if err = writeVarInt(w, p.Hand); err != nil {
		return err
	}
	return
}

type PlayerPositionAndLookServerbound struct {
	X float64

	Y float64

	Z float64

	Yaw float32

	Pitch float32

	OnGround bool
}

// returns 0x12
func (p PlayerPositionAndLookServerbound) id() int32 { return 0x12 }
func (p *PlayerPositionAndLookServerbound) decode(r io.Reader) (err error) {
	if p.X, err = readDouble(r); err != nil {
		return err
	}
	if p.Y, err = readDouble(r); err != nil {
		return err
	}
	if p.Z, err = readDouble(r); err != nil {
		return err
	}
	if p.Yaw, err = readFloat(r); err != nil {
		return err
	}
	if p.Pitch, err = readFloat(r); err != nil {
		return err
	}
	if p.OnGround, err = readBoolean(r); err != nil {
		return err
	}
	return
}
func (p PlayerPositionAndLookServerbound) encode(w io.Writer) (err error) {
	if err = writeDouble(w, p.X); err != nil {
		return err
	}
	if err = writeDouble(w, p.Y); err != nil {
		return err
	}
	if err = writeDouble(w, p.Z); err != nil {
		return err
	}
	if err = writeFloat(w, p.Yaw); err != nil {
		return err
	}
	if err = writeFloat(w, p.Pitch); err != nil {
		return err
	}
	if err = writeBoolean(w, p.OnGround); err != nil {
		return err
	}
	return
}
func packetDecoder(state State, direction Direction, id int32, r io.Reader) (Packet, error) {
	switch state {
	case Handshaking:
		switch direction {
		case Serverbound:
			switch id {
			case 0:
				var p Handshake
				err := p.decode(r)
				return p, err
			}
		}
	case Status:
		switch direction {
		case Clientbound:
			switch id {
			case 0:
				var p Response
				err := p.decode(r)
				return p, err
			}
		case Serverbound:
			switch id {
			case 1:
				var p Ping
				err := p.decode(r)
				return p, err
			case 0:
				var p Request
				err := p.decode(r)
				return p, err
			}
		}
	case Login:
		switch direction {
		case Clientbound:
			switch id {
			case 2:
				var p LoginSuccess
				err := p.decode(r)
				return p, err
			case 3:
				var p SetCompression
				err := p.decode(r)
				return p, err
			case 0:
				var p DisconnectLogin
				err := p.decode(r)
				return p, err
			}
		case Serverbound:
			switch id {
			case 0:
				var p LoginStart
				err := p.decode(r)
				return p, err
			}
		}
	case Play:
		switch direction {
		case Clientbound:
			switch id {
			case 3:
				var p SpawnMob
				err := p.decode(r)
				return p, err
			case 29:
				var p UnloadChunk
				err := p.decode(r)
				return p, err
			case 43:
				var p Entity
				err := p.decode(r)
				return p, err
			case 49:
				var p PlayerAbilities
				err := p.decode(r)
				return p, err
			case 1:
				var p SpawnExperienceOrb
				err := p.decode(r)
				return p, err
			case 27:
				var p EntityStatus
				err := p.decode(r)
				return p, err
			case 32:
				var p KeepAliveClientbound
				err := p.decode(r)
				return p, err
			case 53:
				var p PlayerPositionAndLookClientbound
				err := p.decode(r)
				return p, err
			case 40:
				var p EntityRelativeMove
				err := p.decode(r)
				return p, err
			case 2:
				var p SpawnGlobalEntity
				err := p.decode(r)
				return p, err
			case 9:
				var p UpdateBlockEntity
				err := p.decode(r)
				return p, err
			case 10:
				var p BlockAction
				err := p.decode(r)
				return p, err
			case 19:
				var p CloseWindowClientbound
				err := p.decode(r)
				return p, err
			case 33:
				var p ChunkData
				err := p.decode(r)
				return p, err
			case 34:
				var p Effect
				err := p.decode(r)
				return p, err
			case 37:
				var p JoinGame
				err := p.decode(r)
				return p, err
			case 13:
				var p ServerDifficulty
				err := p.decode(r)
				return p, err
			case 18:
				var p ConfirmTransactionClientbound
				err := p.decode(r)
				return p, err
			case 26:
				var p DisconnectPlay
				err := p.decode(r)
				return p, err
			case 30:
				var p ChangeGameState
				err := p.decode(r)
				return p, err
			case 0:
				var p SpawnObject
				err := p.decode(r)
				return p, err
			case 14:
				var p ChatMessageClientbound
				err := p.decode(r)
				return p, err
			case 63:
				var p HeldItemChangeClientbound
				err := p.decode(r)
				return p, err
			case 24:
				var p PluginMessageClientbound
				err := p.decode(r)
				return p, err
			case 77:
				var p SpawnPosition
				err := p.decode(r)
				return p, err
			case 8:
				var p BlockBreakAnimation
				err := p.decode(r)
				return p, err
			case 11:
				var p BlockChange
				err := p.decode(r)
				return p, err
			case 23:
				var p SetCooldown
				err := p.decode(r)
				return p, err
			case 35:
				var p Particle
				err := p.decode(r)
				return p, err
			case 5:
				var p SpawnPlayer
				err := p.decode(r)
				return p, err
			case 21:
				var p WindowProperty
				err := p.decode(r)
				return p, err
			case 42:
				var p EntityLook
				err := p.decode(r)
				return p, err
			case 4:
				var p SpawnPainting
				err := p.decode(r)
				return p, err
			case 6:
				var p AnimationClientbound
				err := p.decode(r)
				return p, err
			case 25:
				var p NamedSoundEffect
				err := p.decode(r)
				return p, err
			case 41:
				var p EntityLookAndRelativeMove
				err := p.decode(r)
				return p, err
			}
		case Serverbound:
			switch id {
			case 4:
				var p ClientStatus
				err := p.decode(r)
				return p, err
			case 5:
				var p ClientSettings
				err := p.decode(r)
				return p, err
			case 11:
				var p PluginMessageServerbound
				err := p.decode(r)
				return p, err
			case 42:
				var p AnimationServerbound
				err := p.decode(r)
				return p, err
			case 18:
				var p PlayerPositionAndLookServerbound
				err := p.decode(r)
				return p, err
			case 0:
				var p TeleportConfirm
				err := p.decode(r)
				return p, err
			}
		}
	}
	return nil, UnknownPacketError{ID: id, State: state}
}
